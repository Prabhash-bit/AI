Why JupyterLab?
Interactive Environment: JupyterLab allows running code in individual cells, facilitating experimentation and iterative development.
Data Exploration and Visualization: It integrates seamlessly with libraries like matplotlib and seaborn for creating visualizations and exploring data.
Documentation and Sharing: JupyterLab supports markdown and LaTeX for creating rich documentation and sharing code with others.

JupyterLab can be easily installed using conda, if it isn't already installed:
Make sure you are running the command from within your ai environment.
Prabhash992@htb[/htb]$ conda install -y jupyter jupyterlab notebook ipykernel 
Prabhash992@htb[/htb]$ jupyter lab


JupyterLab's primary component is the notebook, which allows combining code, text, and visualizations in a single document. Notebooks are organized into cells, where each cell can contain either code or markdown text.

Code cells: Execute code in various languages (Python, R, Julia).
Markdown cells: Create formatted text, equations, and images using markdown syntax.
Raw cells: Untyped raw text.

------------------------------------------------------------------------------------------------------------------------------
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Create a sample DataFrame
data = pd.DataFrame({
    "column1": np.random.rand(50),  # 50 random values for column1
    "column2": np.random.rand(50) * 10  # 50 random values (multiplied by 10) for column2
})

# Display the first few rows
print(data.head())

# Create a scatter plot
plt.scatter(data["column1"], data["column2"])
plt.xlabel("Column 1")
plt.ylabel("Column 2")
plt.title("Scatter Plot")
plt.show()



----------------------------------------------------------------------------------------------------------------------------------------
