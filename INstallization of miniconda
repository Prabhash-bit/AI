



First, install Scoop. Open PowerShell and run:

C:\> Set-ExecutionPolicy RemoteSigned -scope CurrentUser # Allow scripts to run
C:\> irm get.scoop.sh | iex


Next, add the extras bucket, which contains Miniconda:
C:\> scoop bucket add extras

Finally, install Miniconda with:
C:\> scoop install miniconda3

To verify the installation, close and reopen PowerShell. Type conda --version to check if Miniconda is installed correctly.
C:\> conda --version

conda 24.9.2



forlinux
Prabhash992@htb[/htb]$ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
Prabhash992@htb[/htb]$ chmod +x Miniconda3-latest-Linux-x86_64.sh
Prabhash992@htb[/htb]$ ./Miniconda3-latest-Linux-x86_64.sh -b -u
Prabhash992@htb[/htb]$ eval "$(/home/$USER/miniconda3/bin/conda shell.$(ps -p $$ -o comm=) hook)"


To initialize conda for your shell, run the following command after installing Miniconda:
Prabhash992@htb[/htb]$ conda init

Finally, run these two commands to complete the init process
Prabhash992@htb[/htb]$ conda config --add channels defaults
Prabhash992@htb[/htb]$ conda config --add channels conda-forge
Prabhash992@htb[/htb]$ conda config --add channels nvidia # only needed if you are on a PC that has a nvidia gpu
Prabhash992@htb[/htb]$ conda config --add channels pytorch
Prabhash992@htb[/htb]$ conda config --set channel_priority strict



Deactivating Base
To prevent the base environment from activating automatically, you can use the following command:
Prabhash992@htb[/htb]$ conda config --set auto_activate_base false



Managing Virtual Environments
In software development, managing dependencies can quickly become a complex task, especially when working on multiple projects with different library requirements.

This is where virtual environments come into play. A virtual environment is an isolated space where you can install packages and dependencies specific to a particular project, without interfering with other projects or your system's global Python installation.

They are critical for AI tasks for a few reasons:

Dependency Isolation: Each project can have its own set of dependencies, even if they conflict with those of other projects.
Clean Project Structure: Keeps your project directory clean and organized by containing all dependencies within the environment.
Reproducibility: Ensures that your project can be easily reproduced on different systems with the same dependencies.
System Stability: Prevents conflicts with your global Python installation and avoids breaking other projects.



conda provides a simple way to create virtual environments. For example, to create a new environment named ai with Python 3.11, use the following command:
Prabhash992@htb[/htb]$ conda create -n ai python=3.11

To activate the myenv environment, use:
Prabhash992@htb[/htb]$ conda activate ai

To deactivate the environment, use:
Prabhash992@htb[/htb]$ conda deactivate

Essential Setup
Use the conda install command to install the following core packages:
Prabhash992@htb[/htb]$ conda install -y numpy scipy pandas scikit-learn matplotlib seaborn transformers datasets tokenizers accelerate evaluate optimum huggingface_hub nltk category_encoders
Prabhash992@htb[/htb]$ conda install -y pytorch torchvision torchaudio pytorch-cuda=12.4 -c pytorch -c nvidia
Prabhash992@htb[/htb]$ pip install requests requests_toolbelt

Prabhash992@htb[/htb]$ conda update --all































